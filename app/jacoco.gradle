apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.2'
}

android {

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    testOptions.unitTests.all {
        jacoco {
            includeNoLocationClasses = true
        }
    }
}

task jacocoTestReport { self ->
    build.dependsOn self
}

android.testVariants.all {
    def variant = it.testedVariant
    def name = variant.name.capitalize()

    tasks.create(name: "jacoco${name}TestReport", type: JacocoReport) { self ->
        group = 'Reporting'
        description = "Generates Jacoco coverage reports on the ${variant.name} variant"

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def excludes = [
                '**/BR.*',
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                'android/**/*.*',
                '**/*Module.*',
                '**/data',
                '**/*Fragment.*',
                '**/*Activity.*',
                '**/*Adapter.*',
                '**/*Initializer.*',
                '**/*ViewHolder*.*',
                '**/*Service.*'
        ]

        sourceDirectories.setFrom(files(variant.sourceSets.collectMany({ it.java.source })))
        classDirectories.setFrom(fileTree(dir: buildDir, includes: [
                "intermediates/classes/${variant.name}/**",
                "tmp/kotlin-classes/${variant.name}/**"
        ], excludes: excludes))
        executionData.setFrom(fileTree(dir: buildDir, includes: [
                "jacoco/test${name}UnitTest.exec",
                'outputs/code-coverage/connected/*coverage.ec'
        ]))

        doLast {
            println "Wrote HTML coverage report to ${reports.html.destination}/index.html"
            println "Wrote XML coverage report to ${reports.xml.destination}"
        }

        dependsOn "test${name}UnitTest", "create${name}CoverageReport"
        jacocoTestReport.dependsOn self
    }

}
